/*
 * Coded by ISO53
 */
package com.mycompany.deneme;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.ArrayList;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

/**
 *
 * @author termi
 */
public class YoutubeVideoLengthCalculator extends javax.swing.JFrame {

    /**
     * Creates new form YoutubeVideoLengthCalculator
     */
    ArrayList<Integer> videoLengthsSec;
    ArrayList<JCheckBox> jCheckBoxes;

    public YoutubeVideoLengthCalculator() {
        initComponents();

        ImageIcon youtubeLogo = new ImageIcon(this.getClass().getClassLoader().getResource("youtubeLogo.png"));
        jlbl_youtubeLogo.setIcon(youtubeLogo);
        jlbl_youtubeLogo.setSize(256, 180);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jpnl_background = new javax.swing.JPanel();
        jlbl_title = new javax.swing.JLabel();
        jlbl_enterLink = new javax.swing.JLabel();
        jtxtfld_playlistLink = new javax.swing.JTextField();
        jsprtr_linkUnderLine = new javax.swing.JSeparator();
        btn_getVideos = new java.awt.Button();
        jscrllpn_videos = new javax.swing.JScrollPane();
        jpnl_scrollPane = new javax.swing.JPanel();
        jpnl_rightPanel = new javax.swing.JPanel();
        jlbl_youtubeLogo = new javax.swing.JLabel();
        jlbl_totalVideoLength = new javax.swing.JLabel();
        jlbl_numberOfVideos = new javax.swing.JLabel();
        jlbl_averageVideoLength = new javax.swing.JLabel();
        btn_calculate = new java.awt.Button();
        jcmbbox_videoSpeed = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Youtube Playlist Length Calculator");
        setMinimumSize(new java.awt.Dimension(630, 403));
        setPreferredSize(new java.awt.Dimension(630, 403));

        jpnl_background.setBackground(new java.awt.Color(51, 51, 51));

        jlbl_title.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jlbl_title.setForeground(new java.awt.Color(132, 100, 200));
        jlbl_title.setText("YouTube Playlist Video Length Calculator");

        jlbl_enterLink.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jlbl_enterLink.setForeground(new java.awt.Color(132, 100, 200));
        jlbl_enterLink.setText("Enter Link Here: ");

        jtxtfld_playlistLink.setBackground(new java.awt.Color(51, 51, 51));
        jtxtfld_playlistLink.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jtxtfld_playlistLink.setForeground(new java.awt.Color(255, 255, 255));
        jtxtfld_playlistLink.setText("https://www.youtube.com/playlist?list");
        jtxtfld_playlistLink.setBorder(null);

        btn_getVideos.setBackground(new java.awt.Color(132, 100, 200));
        btn_getVideos.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_getVideos.setForeground(new java.awt.Color(255, 255, 255));
        btn_getVideos.setLabel("Get Videos!");
        btn_getVideos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_getVideosActionPerformed(evt);
            }
        });

        jscrllpn_videos.setBackground(new java.awt.Color(102, 102, 102));
        jscrllpn_videos.setBorder(null);

        jpnl_scrollPane.setLayout(new javax.swing.BoxLayout(jpnl_scrollPane, javax.swing.BoxLayout.Y_AXIS));
        jscrllpn_videos.setViewportView(jpnl_scrollPane);

        jpnl_rightPanel.setBackground(new java.awt.Color(51, 51, 51));
        jpnl_rightPanel.setLayout(new java.awt.GridBagLayout());

        jlbl_youtubeLogo.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jlbl_youtubeLogo.setMinimumSize(new java.awt.Dimension(320, 225));
        jlbl_youtubeLogo.setPreferredSize(new java.awt.Dimension(320, 225));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
        jpnl_rightPanel.add(jlbl_youtubeLogo, gridBagConstraints);

        jlbl_totalVideoLength.setFont(new java.awt.Font("Calibri", 1, 13)); // NOI18N
        jlbl_totalVideoLength.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_totalVideoLength.setText("Total Video Length:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 32, 0);
        jpnl_rightPanel.add(jlbl_totalVideoLength, gridBagConstraints);

        jlbl_numberOfVideos.setFont(new java.awt.Font("Calibri", 1, 13)); // NOI18N
        jlbl_numberOfVideos.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_numberOfVideos.setText("Number of Videos:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 32, 0);
        jpnl_rightPanel.add(jlbl_numberOfVideos, gridBagConstraints);

        jlbl_averageVideoLength.setFont(new java.awt.Font("Calibri", 1, 13)); // NOI18N
        jlbl_averageVideoLength.setForeground(new java.awt.Color(255, 255, 255));
        jlbl_averageVideoLength.setText("Average Video Length:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 32, 0);
        jpnl_rightPanel.add(jlbl_averageVideoLength, gridBagConstraints);

        btn_calculate.setBackground(new java.awt.Color(132, 100, 200));
        btn_calculate.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        btn_calculate.setForeground(new java.awt.Color(255, 255, 255));
        btn_calculate.setLabel("Calculate!");
        btn_calculate.setMinimumSize(new java.awt.Dimension(85, 25));
        btn_calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_calculateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 46;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jpnl_rightPanel.add(btn_calculate, gridBagConstraints);

        jcmbbox_videoSpeed.setFont(new java.awt.Font("Calibri", 0, 13)); // NOI18N
        jcmbbox_videoSpeed.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0.25x", "0.50x", "0.75x", "Normal", "1.25x", "1.50x", "1.75x", "2x" }));
        jcmbbox_videoSpeed.setSelectedIndex(3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jpnl_rightPanel.add(jcmbbox_videoSpeed, gridBagConstraints);

        javax.swing.GroupLayout jpnl_backgroundLayout = new javax.swing.GroupLayout(jpnl_background);
        jpnl_background.setLayout(jpnl_backgroundLayout);
        jpnl_backgroundLayout.setHorizontalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbl_title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpnl_backgroundLayout.createSequentialGroup()
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jscrllpn_videos, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpnl_backgroundLayout.createSequentialGroup()
                                .addComponent(jlbl_enterLink)
                                .addGap(18, 18, 18)
                                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtxtfld_playlistLink, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jsprtr_linkUnderLine))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_getVideos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jpnl_rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jpnl_backgroundLayout.setVerticalGroup(
            jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbl_title, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpnl_backgroundLayout.createSequentialGroup()
                        .addComponent(jtxtfld_playlistLink, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsprtr_linkUnderLine))
                    .addComponent(jlbl_enterLink, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_getVideos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpnl_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jscrllpn_videos)
                    .addComponent(jpnl_rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_getVideosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_getVideosActionPerformed

        try {
            URL url = new URL(jtxtfld_playlistLink.getText());
            Scanner sc = new Scanner(url.openStream(), "UTF-8");
            Color backgroundGrey = new Color(51, 51, 51);

            String line = "";
            while (sc.hasNextLine()) {
                line += sc.nextLine();
            }

            line = line.replace(':', ' ');
            line = line.replace('{', ' ');
            line = line.replace('[', ' ');

            String videoTitleFilterFirst = "\"title\"  \"runs\"   \"text\" \""; // "title"  "runs"   "text" 
            String videoTitleFilterSecond = "\"}],\"accessibility\"  \"accessibilityData\"  \"label\""; // }],"accessibility"  "accessibilityData"  "label"
            String videoLengthStrFilter = "\"lengthText\"  \"accessibility\"  \"accessibilityData\"  \"label\" \""; // "lengthText"  "accessibility"  "accessibilityData"  "label"
            String videoLengthSecFilter = "\"lengthSeconds\" \"";
            String videoImagesFilterFirst = "\"thumbnail\"  \"thumbnails\"   \"url\" \""; // "thumbnail"  "thumbnails"   "url"

            line = line.split("webResponseContextExtensionData")[1];
            line = line.split("UNPLUGGED_LOGO")[0];

            ArrayList<String> videoNames = new ArrayList<>();
            ArrayList<String> videoLengthsStr = new ArrayList<>();
            ArrayList<URL> videoImagesUrls = new ArrayList<>();
            ArrayList<Image> videoImages = new ArrayList<>();
            videoLengthsSec = new ArrayList<>();
            jCheckBoxes = new ArrayList<>();

            int youtubeVideoIndex = 0;

            //***************** COLLECT DATA FROM YOUTUBE HTML *****************
            while (true) {
                if (line.contains(videoImagesFilterFirst)) {
                    String tempLineImageUrl = line.split(videoImagesFilterFirst)[1];
                    tempLineImageUrl = tempLineImageUrl.split("\",\"width\"")[0];
                    tempLineImageUrl = tempLineImageUrl.replace(' ', ':');
                    line = line.split(",\"width\"", 2)[1];

                    String tempLineVideoName = line.split(videoTitleFilterFirst)[1];
                    tempLineVideoName = tempLineVideoName.split("\"index\"")[0];
                    tempLineVideoName = tempLineVideoName.split(videoTitleFilterSecond)[0];
                    line = line.split("\"index\"", 2)[1];

                    String tempLineVideoStrLength = line.split(videoLengthStrFilter)[1];
                    tempLineVideoStrLength = tempLineVideoStrLength.split("\"}}")[0];
                    line = line.split("\"index\" " + youtubeVideoIndex, 2)[1];
                    youtubeVideoIndex++;

                    String tempLineVideoSecLength = line.split(videoLengthSecFilter)[1];
                    tempLineVideoSecLength = tempLineVideoSecLength.split("\"")[0];
                    videoLengthsSec.add(Integer.parseInt(tempLineVideoSecLength));

                    videoLengthsStr.add(tempLineVideoStrLength);
                    videoNames.add(tempLineVideoName);
                    videoImagesUrls.add(new URL(tempLineImageUrl));
                } else {
                    break;
                }
            }
            //******************************************************************

            //********************** REMOVE REPEAT VIDEOS **********************
            int loopSize = videoNames.size() - 1;
            for (int i = 0; i < loopSize; i++) {
                if (videoNames.get(i).equals(videoNames.get(i + 1))) {
                    videoNames.remove(i);
                    videoLengthsStr.remove(i);
                    videoImagesUrls.remove(i);
                    loopSize--;
                }
            }
            //******************************************************************

            //************************ SET VIDEO IMAGES ************************
            for (int i = 0; i < videoImagesUrls.size(); i++) {
                BufferedImage bImage = ImageIO.read(videoImagesUrls.get(i));
                bImage = bImage.getSubimage(0, 45, 480, 360 - 45 * 2); //new image res -> 480*270
                Image image = bImage.getScaledInstance(176, 99, BufferedImage.SCALE_SMOOTH);
                videoImages.add(image);
            }
            //******************************************************************

            //****************** ADJUST VIDEO INFORMATION ROWS *****************
            jpnl_scrollPane.removeAll();

            for (int i = 0; i < videoNames.size(); i++) {
                JPanel backPanel = new JPanel();
                backPanel.setLayout(new BoxLayout(backPanel, BoxLayout.X_AXIS));
                backPanel.setBackground(backgroundGrey);
                backPanel.setVisible(true);
                backPanel.setSize(200, 100);
                backPanel.setMinimumSize(new Dimension(200, 100));
                jpnl_scrollPane.add(backPanel);

                JPanel spacePanel = new JPanel();
                spacePanel.setBackground(backgroundGrey);
                spacePanel.setSize(20, 100);
                jpnl_scrollPane.add(spacePanel);

                JPanel leftPanel = new JPanel();
                leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.X_AXIS));
                leftPanel.setBackground(backgroundGrey);
                leftPanel.setVisible(true);
                backPanel.add(leftPanel);

                JPanel rightPanel = new JPanel();
                rightPanel.setLayout(new GridLayout(0, 1, 0, 0));
                rightPanel.setBackground(backgroundGrey);
                rightPanel.setVisible(true);
                backPanel.add(rightPanel);

                JCheckBox isVideoIncluded = new JCheckBox();
                isVideoIncluded.setSelected(true);
                isVideoIncluded.setText("   ");
                leftPanel.add(isVideoIncluded);
                jCheckBoxes.add(isVideoIncluded);

                JLabel videoIcon = new JLabel((i + 1) + "    ", new ImageIcon(videoImages.get(i)), SwingConstants.LEFT);
                videoIcon.setHorizontalTextPosition(SwingConstants.LEFT);
                videoIcon.setFont(new Font("Calibri", Font.BOLD, 15));
                videoIcon.setForeground(Color.LIGHT_GRAY);
                leftPanel.add(videoIcon);

                String fiveSpace = "&#160;&#160;&#160;&#160;&#160;";
                JLabel videoName = new JLabel("<html>" + fiveSpace + videoNames.get(i)
                        + "<br/>" + fiveSpace + videoLengthsStr.get(i) + "</html>");
                videoName.setForeground(Color.WHITE);
                videoName.setFont(new Font("Calibri", Font.BOLD, 14));
                rightPanel.add(videoName);

                backPanel.revalidate();
                jpnl_scrollPane.revalidate();
            }
            //******************************************************************

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_getVideosActionPerformed

    private void btn_calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_calculateActionPerformed

        int totalVideoLength = 0;
        int numberOfVideos = 0;

        for (int i = 0; i < jCheckBoxes.size(); i++) {
            if (jCheckBoxes.get(i).isSelected()) {
                totalVideoLength += videoLengthsSec.get(i);
                numberOfVideos++;
            }
        }
        
        String totalVideoLengthString;
        String averageVideoLengthString;

        switch (jcmbbox_videoSpeed.getSelectedItem().toString()) {
            case "0.25x":
                totalVideoLength = (int)(totalVideoLength / 0.25);
                break;
            case "0.50x":
                totalVideoLength = (int)(totalVideoLength / 0.50);
                break;
            case "0.75x":
                totalVideoLength = (int)(totalVideoLength / 0.75);
                break;
            case "Normal":
                break;
            case "1.25x":
                totalVideoLength = (int)(totalVideoLength / 1.25);
                break;
            case "1.50x":
                totalVideoLength = (int)(totalVideoLength / 1.50);
                break;
            case "1.75x":
                totalVideoLength = (int)(totalVideoLength / 1.75);
                break;
            case "2x":
                totalVideoLength = (int)(totalVideoLength / 2.00);
                break;
        }
        
        totalVideoLengthString = secondToTimeString(totalVideoLength);
        averageVideoLengthString = secondToTimeString(totalVideoLength / numberOfVideos);
        
        jlbl_totalVideoLength.setText("Total Video Length: " + totalVideoLengthString);
        jlbl_numberOfVideos.setText("Number Of Videos: " + numberOfVideos);
        jlbl_averageVideoLength.setText("Average Video Length: " + averageVideoLengthString);
    }//GEN-LAST:event_btn_calculateActionPerformed

    public int lengthCalculator(ArrayList<Integer> videoLenghtsSec) {
        // xxx saat xx dakika xx saniye
        int totalSecond = 0;

        for (int i = 0; i < videoLenghtsSec.size(); i++) {
            totalSecond += videoLenghtsSec.get(i);
        }

        return totalSecond / videoLenghtsSec.size();
    }
    
    public static String secondToTimeString(int totalSecond) {

        String timeString;
        int second;
        int minute;
        int hour;
        int day;
        
        second = totalSecond % 60;

        totalSecond = totalSecond - second;

        minute = totalSecond / 60;

        hour = (minute - (minute % 60)) / 60;

        minute = minute % 60;

        day = (hour - (hour % 24)) / 24;
        
        hour = hour % 24;

        timeString = day + " day " + hour + " hour " + minute + " minute " + second + " second";
        
        return timeString;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(YoutubeVideoLengthCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(YoutubeVideoLengthCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(YoutubeVideoLengthCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(YoutubeVideoLengthCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new YoutubeVideoLengthCalculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btn_calculate;
    private java.awt.Button btn_getVideos;
    private javax.swing.JComboBox<String> jcmbbox_videoSpeed;
    private javax.swing.JLabel jlbl_averageVideoLength;
    private javax.swing.JLabel jlbl_enterLink;
    private javax.swing.JLabel jlbl_numberOfVideos;
    private javax.swing.JLabel jlbl_title;
    private javax.swing.JLabel jlbl_totalVideoLength;
    private javax.swing.JLabel jlbl_youtubeLogo;
    private javax.swing.JPanel jpnl_background;
    private javax.swing.JPanel jpnl_rightPanel;
    private javax.swing.JPanel jpnl_scrollPane;
    private javax.swing.JScrollPane jscrllpn_videos;
    private javax.swing.JSeparator jsprtr_linkUnderLine;
    private javax.swing.JTextField jtxtfld_playlistLink;
    // End of variables declaration//GEN-END:variables
}
